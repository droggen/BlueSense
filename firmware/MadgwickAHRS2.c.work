//=====================================================================================================
// MadgwickAHRS.c
//=====================================================================================================
//
// Implementation of Madgwick's IMU and AHRS algorithms.
// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms
//
// Date			Author          Notes
// 29/09/2011	SOH Madgwick    Initial release
// 02/10/2011	SOH Madgwick	Optimised for reduced CPU load
// 19/02/2012	SOH Madgwick	Magnetometer measurement is normalised
//
//=====================================================================================================

//---------------------------------------------------------------------------------------------------
// Header files

#if FIXEDPOINTFILTER==1



#include "MadgwickAHRS2.h"
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdfix.h>

//---------------------------------------------------------------------------------------------------
// Definitions

//#define sampleFreq	512.0k		// sample frequency in Hz
#define sampleFreq	100.0k		// sample frequency in Hz

// 0.1 too slow
//#define betaDef		0.1k		// 2 * proportional gain
//#define betaDef		1.1k		// 2 * proportional gain		// dan - too much
#define betaDef		0.4K		// 2 * proportional gain		// dan 



//---------------------------------------------------------------------------------------------------
// Variable definitions
FIXEDPOINTTYPE invSampleFreq = 1.0k/sampleFreq;
volatile FIXEDPOINTTYPE beta = betaDef;										// 2 * proportional gain (Kp)
volatile FIXEDPOINTTYPE q0 = 1.0k, q1 = 0.0k, q2 = 0.0k, q3 = 0.0k;	// quaternion of sensor frame relative to auxiliary frame

//---------------------------------------------------------------------------------------------------
// Function declarations

FIXEDPOINTTYPE invSqrt(FIXEDPOINTTYPE x);

//====================================================================================================
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(FIXEDPOINTTYPE gx, FIXEDPOINTTYPE gy, FIXEDPOINTTYPE gz, FIXEDPOINTTYPE ax, FIXEDPOINTTYPE ay, FIXEDPOINTTYPE az, FIXEDPOINTTYPE mx, FIXEDPOINTTYPE my, FIXEDPOINTTYPE mz) {
	FIXEDPOINTTYPE recipNorm;
	FIXEDPOINTTYPE s0, s1, s2, s3;
	FIXEDPOINTTYPE qDot1, qDot2, qDot3, qDot4;
	FIXEDPOINTTYPE hx, hy;
	FIXEDPOINTTYPE _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	
	FIXEDPOINTTYPE _4q0, _4q1, _4q2 ,_8q1, _8q2;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	/*if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
		return;
	}*/

	// Rate of change of quaternion from gyroscope
	// qe[-1;1] ge[-inf;inf] qDote[-inf;inf]
	qDot1 = 0.5k * (-q1 * gx - q2 * gy - q3 * gz);
	qDot2 = 0.5k * (q0 * gx + q2 * gz - q3 * gy);
	qDot3 = 0.5k * (q0 * gy - q1 * gz + q3 * gx);
	qDot4 = 0.5k * (q0 * gz + q1 * gy - q2 * gx);

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0k) && (ay == 0.0k) && (az == 0.0k))) {

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
		ax *= recipNorm;
		ay *= recipNorm;
		az *= recipNorm;   

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0k * q0;
		_2q1 = 2.0k * q1;
		_2q2 = 2.0k * q2;
		_2q3 = 2.0k * q3;
		// q0q0,q1q1,q2q2,q3q3 e [-1;1]
		q0q0 = q0 * q0;
		q1q1 = q1 * q1;
		q2q2 = q2 * q2;
		q3q3 = q3 * q3;


		
		if(!((mx == 0.0k) && (my == 0.0k) && (mz == 0.0k)))
		{
			// mag is non null
		
			// Normalise magnetometer measurement
			recipNorm = invSqrt(mx * mx + my * my + mz * mz);
			mx *= recipNorm;
			my *= recipNorm;
			mz *= recipNorm;

			// Auxiliary variables to avoid repeated arithmetic
			_2q0mx = 2.0k * q0 * mx;
			_2q0my = 2.0k * q0 * my;
			_2q0mz = 2.0k * q0 * mz;
			_2q1mx = 2.0k * q1 * mx;
			_2q0q2 = 2.0k * q0 * q2;
			_2q2q3 = 2.0k * q2 * q3;
			//q0q0 = q0 * q0;
			q0q1 = q0 * q1;
			q0q2 = q0 * q2;
			q0q3 = q0 * q3;
			//q1q1 = q1 * q1;
			q1q2 = q1 * q2;
			q1q3 = q1 * q3;
			//q2q2 = q2 * q2;
			q2q3 = q2 * q3;
			//q3q3 = q3 * q3;

			// Reference direction of Earth's magnetic field
			hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
			hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
			_2bx = sqrt(hx * hx + hy * hy);
			_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
			_4bx = 2.0k * _2bx;
			_4bz = 2.0k * _2bz;

			// Gradient decent algorithm corrective step
			s0 = -_2q2 * (2.0k * q1q3 - _2q0q2 - ax) + _2q1 * (2.0k * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5k - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5k - q1q1 - q2q2) - mz);
			s1 = _2q3 * (2.0k * q1q3 - _2q0q2 - ax) + _2q0 * (2.0k * q0q1 + _2q2q3 - ay) - 4.0k * q1 * (1 - 2.0k * q1q1 - 2.0k * q2q2 - az) + _2bz * q3 * (_2bx * (0.5k - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5k - q1q1 - q2q2) - mz);
			s2 = -_2q0 * (2.0k * q1q3 - _2q0q2 - ax) + _2q3 * (2.0k * q0q1 + _2q2q3 - ay) - 4.0k * q2 * (1 - 2.0k * q1q1 - 2.0k * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5k - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5k - q1q1 - q2q2) - mz);
			s3 = _2q1 * (2.0k * q1q3 - _2q0q2 - ax) + _2q2 * (2.0k * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5k - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5k - q1q1 - q2q2) - mz);
			recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
		}
		else
		{
			// mag is null
			// Auxiliary variables to avoid repeated arithmetic
			_4q0 = 4.0k * q0;
			_4q1 = 4.0k * q1;
			_4q2 = 4.0k * q2;
			_8q1 = 8.0k * q1;
			_8q2 = 8.0k * q2;

			// Gradient decent algorithm corrective step
			s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
			s1 = _4q1 * q3q3 - _2q3 * ax + 4.0k * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
			s2 = 4.0k * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
			s3 = 4.0k * q1q1 * q3 - _2q1 * ax + 4.0k * q2q2 * q3 - _2q2 * ay;
			recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
			
		}
		
		s0 *= recipNorm;
		s1 *= recipNorm;
		s2 *= recipNorm;
		s3 *= recipNorm;

		// Apply feedback step
		qDot1 -= beta * s0;
		qDot2 -= beta * s1;
		qDot3 -= beta * s2;
		qDot4 -= beta * s3;
	}

	// Integrate rate of change of quaternion to yield quaternion
	/*
	q0 += qDot1 * (1.0f / sampleFreq);
	q1 += qDot2 * (1.0f / sampleFreq);
	q2 += qDot3 * (1.0f / sampleFreq);
	q3 += qDot4 * (1.0f / sampleFreq);*/
	q0 += qDot1 * invSampleFreq;
	q1 += qDot2 * invSampleFreq;
	q2 += qDot3 * invSampleFreq;
	q3 += qDot4 * invSampleFreq;

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
	q0 *= recipNorm;
	q1 *= recipNorm;
	q2 *= recipNorm;
	q3 *= recipNorm;
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

/*void MadgwickAHRSupdateIMU(FIXEDPOINTTYPE gx, FIXEDPOINTTYPE gy, FIXEDPOINTTYPE gz, FIXEDPOINTTYPE ax, FIXEDPOINTTYPE ay, FIXEDPOINTTYPE az) {
	FIXEDPOINTTYPE recipNorm;
	FIXEDPOINTTYPE s0, s1, s2, s3;
	FIXEDPOINTTYPE qDot1, qDot2, qDot3, qDot4;
	FIXEDPOINTTYPE _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5k * (-q1 * gx - q2 * gy - q3 * gz);
	qDot2 = 0.5k * (q0 * gx + q2 * gz - q3 * gy);
	qDot3 = 0.5k * (q0 * gy - q1 * gz + q3 * gx);
	qDot4 = 0.5k * (q0 * gz + q1 * gy - q2 * gx);

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
		ax *= recipNorm;
		ay *= recipNorm;
		az *= recipNorm;   

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0k * q0;
		_2q1 = 2.0k * q1;
		_2q2 = 2.0k * q2;
		_2q3 = 2.0k * q3;
		_4q0 = 4.0k * q0;
		_4q1 = 4.0k * q1;
		_4q2 = 4.0k * q2;
		_8q1 = 8.0k * q1;
		_8q2 = 8.0k * q2;
		q0q0 = q0 * q0;
		q1q1 = q1 * q1;
		q2q2 = q2 * q2;
		q3q3 = q3 * q3;

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0k * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
		s2 = 4.0k * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
		s3 = 4.0k * q1q1 * q3 - _2q1 * ax + 4.0k * q2q2 * q3 - _2q2 * ay;
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
		s0 *= recipNorm;
		s1 *= recipNorm;
		s2 *= recipNorm;
		s3 *= recipNorm;

		// Apply feedback step
		qDot1 -= beta * s0;
		qDot2 -= beta * s1;
		qDot3 -= beta * s2;
		qDot4 -= beta * s3;
	}

	// Integrate rate of change of quaternion to yield quaternion
	//q0 += qDot1 * (1.0f / sampleFreq);
	//q1 += qDot2 * (1.0f / sampleFreq);
	//q2 += qDot3 * (1.0f / sampleFreq);
	//q3 += qDot4 * (1.0f / sampleFreq);
	
	q0 += qDot1 * invSampleFreq;
	q1 += qDot2 * invSampleFreq;
	q2 += qDot3 * invSampleFreq;
	q3 += qDot4 * invSampleFreq;

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
	q0 *= recipNorm;
	q1 *= recipNorm;
	q2 *= recipNorm;
	q3 *= recipNorm;
}*/

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root


int32_t _FP_SquareRoot(int32_t val, int32_t Q) {
  int32_t sval = 0;
  
  printf("_FP_SquareRoot %ld %ld\n",val,Q);
 
  //convert Q to even
  if (Q & 0x01) {
    Q -= 1;
    val >>= 1;
  }
  //integer square root math
  for (uint8_t i=0; i<=30; i+=2) {
    if ((0x40000001>>i) + sval <= val) {  
      val -= (0x40000001>>i) + sval;     
      sval = (sval>>1) | (0x40000001>>i);
    } else {
      sval = sval>>1;
    }
  }
  if (sval < val) 
    ++sval;  
  //this is the square root in Q format
  sval <<= (Q)/2;
  //convert the square root to Q15 format
  if (Q < 15)
    return(sval<<(15 - Q));
  else
    return(sval>>(Q - 15));
}

int32_t _FP_SquareRootX(int32_t val) {
	int32_t sval = 0;
	printf("_FP_SquareRoot %ld\n",val);

	val>>=1;

	//integer square root math
	for (uint8_t i=0; i<=30; i+=2) {
		if ((0x40000001>>i) + sval <= val) {  
		  val -= (0x40000001>>i) + sval;     
		  sval = (sval>>1) | (0x40000001>>i);
		} else {
		  sval = sval>>1;
		}
	}
	if (sval < val) 
		++sval;  
	return sval<<8;
}

_Accum sqrts15_old(_Accum v)
{
	// Get the int value
	int32_t val;
	int32_t r;
	_Accum rfp;
	
	val = *(int32_t *)&v;
	
	//r=_FP_SquareRoot(val,15);
	r=_FP_SquareRootX(val);
	rfp = *(_Accum*)&r;
	return rfp;
}


// Performs a square root of a s16.15 number.
_Accum sqrts15(_Accum v)
{
	unsigned long val;		// input value
	unsigned long sval = 0;	// output value
	unsigned long r;			// tmp for casting
	_Accum rfp;			// tmp for casting
	
	val = *(unsigned long *)&v;
 
	val>>=1;

	//integer square root math
	for (uint8_t i=0; i<=30; i+=2) {
		if ((0x40000001>>i) + sval <= val) {  
		  val -= (0x40000001>>i) + sval;     
		  sval = (sval>>1) | (0x40000001>>i);
		} else {
		  sval = sval>>1;
		}
	}
	if (sval < val) 
		++sval;  
	
	sval<<=8;
	
	rfp = *(_Accum*)&sval;
	return rfp;
}

float invSqrtflt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;
}

/*
	1.0k/sqrts15:			2700-3700
	1.0k/sqrt:				2800-3000
	1.0k/invSqrtflt:		2790-2970
	return invSqrtflt:		2690-2900
	return x:				2390-2720
*/

// From http://www.olliw.eu/2014/fast-functions/#invsqrt
// 
FIXEDPOINTTYPE invSqrtOlliw(FIXEDPOINTTYPE x)
{
	_Accum y;
	// y1 = 3/2 - 1/2*x
	y = 1.5k - (x>>1);
	// y2 = (1.5 - x * y1* (y1/2) ) * y1
	//y = q30_mul( Q30(1.5) - q30_mul( x, q30_mul(y,y>>1) ) , y );
	y = (1.5k-x*y*(y>>1))*y;
	y = (1.5k-x*y*(y>>1))*y;
	return y;
}
  
  
FIXEDPOINTTYPE invSqrt(FIXEDPOINTTYPE x) {
/*	FIXEDPOINTTYPE halfx = 0.5k * x;
	FIXEDPOINTTYPE y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(FIXEDPOINTTYPE*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;*/
	
	//return 1.0k/sqrt(x);
	//return 1.0k/sqrts15(x);
	//return 1.0f/invSqrtflt(x);
	
	//return invSqrtflt(x);
	return invSqrtOlliw(x);
	
	//return x;
	
	//_FP_SquareRoot(a, 15);
	
}

//====================================================================================================
// END OF CODE
//====================================================================================================

#endif
